//
//  WeatherService.swift
//  Abide
//
//  Created by Taylor Holdridge on 9/9/25.
//

//
//  WeatherService.swift
//  Abide
//

import Foundation
import CoreLocation

struct OpenMeteoResponse: Codable {
    struct CurrentWeather: Codable {
        let temperature: Double
        let weathercode: Int
    }
    let current_weather: CurrentWeather
}

class WeatherService {
    
    // MARK: - Singleton
    static let shared = WeatherService()  // ← Add this

    private init() {} // Make initializer private to enforce singleton
    
    func fetchWeather(latitude: Double, longitude: Double, completion: @escaping (String?) -> Void) {
        
        // Round coordinates for consistency
        let lat = Double(round(latitude * 10000) / 10000)
        let lon = Double(round(longitude * 10000) / 10000)
        
        // Add temperature_unit=fahrenheit
        let urlString = "https://api.open-meteo.com/v1/forecast?latitude=\(lat)&longitude=\(lon)&current_weather=true&temperature_unit=fahrenheit"
        
        guard let url = URL(string: urlString) else {
            completion(nil)
            return
        }
        
        URLSession.shared.dataTask(with: url) { data, _, error in
            guard let data = data, error == nil else {
                print("Weather API error:", error?.localizedDescription ?? "unknown")
                completion(nil)
                return
            }
            
            do {
                let response = try JSONDecoder().decode(OpenMeteoResponse.self, from: data)
                let temp = Int(response.current_weather.temperature)
                let emoji = self.mapWeatherCodeToEmoji(code: response.current_weather.weathercode)
                let weatherText = "\(emoji) \(temp)°F"
                completion(weatherText)
            } catch {
                print("Decoding error:", error)
                completion(nil)
            }
        }.resume()
    }
    
    private func mapWeatherCodeToEmoji(code: Int) -> String {
        switch code {
        case 0: return "☀️"      // Clear sky
        case 1, 2, 3: return "⛅️" // Mainly clear, partly cloudy, overcast
        case 45, 48: return "🌫️"  // Fog
        case 51, 53, 55, 56, 57: return "🌦️" // Drizzle
        case 61, 63, 65, 66, 67: return "🌧️" // Rain
        case 71, 73, 75, 77: return "❄️" // Snow
        case 80, 81, 82: return "🌧️" // Rain showers
        case 95, 96, 99: return "⛈️" // Thunderstorm
        default: return "☁️"       // Unknown
        }
    }
}
