//
//  AuthViewModel.swift
//  Abide
//
//  Created by Taylor Holdridge on 9/9/25.
//

import Foundation
import FirebaseAuth
import SwiftUI

class AuthViewModel: ObservableObject {
    @Published var user: User?
    @Published var isLoggedIn: Bool = false
    @Published var authError: String?
    
    init() {
        self.user = Auth.auth().currentUser
        self.isLoggedIn = user != nil
    }
    
    // MARK: - Sign In
    func signIn(email: String, password: String, completion: ((Bool, String?) -> Void)? = nil) {
        Auth.auth().signIn(withEmail: email, password: password) { [weak self] result, error in
            DispatchQueue.main.async {
                if let error = error as NSError? {
                    print("❌ Sign in error:")
                    print("Code: \(error.code), Domain: \(error.domain), Desc: \(error.localizedDescription)")
                    self?.authError = error.localizedDescription
                    completion?(false, error.localizedDescription)
                } else {
                    self?.user = result?.user
                    self?.isLoggedIn = true
                    self?.authError = nil
                    completion?(true, nil)
                }
            }
        }
    }
    
    // MARK: - Sign Out
    func signOut() {
        try? Auth.auth().signOut()
        self.user = nil
        self.isLoggedIn = false
    }
    
    // MARK: - Register
    func register(email: String, password: String, displayName: String, completion: @escaping (Bool, String?) -> Void) {
        Auth.auth().createUser(withEmail: email, password: password) { [weak self] result, error in
            if let error = error as NSError? {
                print("❌ Firebase registration error:")
                print("Code: \(error.code), Domain: \(error.domain), Desc: \(error.localizedDescription)")
                completion(false, error.localizedDescription)
                return
            }
            
            guard let user = result?.user else {
                completion(false, "Failed to create user")
                return
            }
            
            let changeRequest = user.createProfileChangeRequest()
            changeRequest.displayName = displayName
            changeRequest.commitChanges { error in
                DispatchQueue.main.async {
                    if let error = error as NSError? {
                        print("❌ Profile update error:")
                        print("Code: \(error.code), Domain: \(error.domain), Desc: \(error.localizedDescription)")
                        completion(false, "Profile update error: \(error.localizedDescription)")
                    } else {
                        self?.user = user
                        self?.isLoggedIn = true
                        print("✅ Registration success for \(displayName)")
                        completion(true, nil)
                    }
                }
            }
        }
    }
    
    // MARK: - Password Reset
    func sendPasswordReset(email: String, completion: ((Bool, String?) -> Void)? = nil) {
        Auth.auth().sendPasswordReset(withEmail: email) { error in
            DispatchQueue.main.async {
                if let error = error as NSError? {
                    print("❌ Password reset error:")
                    print("Code: \(error.code), Domain: \(error.domain), Desc: \(error.localizedDescription)")
                    completion?(false, error.localizedDescription)
                } else {
                    print("✅ Password reset email sent")
                    completion?(true, nil)
                }
            }
        }
    }
}
